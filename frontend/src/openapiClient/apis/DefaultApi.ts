/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RespeckData,
    RespeckDataFromJSON,
    RespeckDataToJSON,
} from '../models';
import oboe from 'oboe';


export interface GetRespeckDataRequest {
    respeckMac: string;
    xFields?: string;
}

export interface GetRespeckStreamedDataRequest {
    respeckMac: string;
}

export interface PostRespeckDataRequest {
    respeckMac: string;
    payload: RespeckData;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async getFullDataRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getFullData(): Promise<void> {
        await this.getFullDataRaw();
    }

    /**
     */
    async getRespeckDataRaw(requestParameters: GetRespeckDataRequest): Promise<runtime.ApiResponse<RespeckData>> {
        if (requestParameters.respeckMac === null || requestParameters.respeckMac === undefined) {
            throw new runtime.RequiredError('respeckMac','Required parameter requestParameters.respeckMac was null or undefined when calling getRespeckData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xFields !== undefined && requestParameters.xFields !== null) {
            headerParameters['X-Fields'] = String(requestParameters.xFields);
        }

        const response = await this.request({
            path: `/respeck/{respeck_mac}`.replace(`{${"respeck_mac"}}`, encodeURIComponent(String(requestParameters.respeckMac))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RespeckDataFromJSON(jsonValue));
    }

    /**
     */
    async getRespeckData(requestParameters: GetRespeckDataRequest): Promise<RespeckData> {
        const response = await this.getRespeckDataRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    // *getRespeckStreamedDataRaw(requestParameters: GetRespeckStreamedDataRequest): Generator<Array<number>, Array<number>, Array<number>> {
    //     if (requestParameters.respeckMac === null || requestParameters.respeckMac === undefined) {
    //         throw new runtime.RequiredError('respeckMac','Required parameter requestParameters.respeckMac was null or undefined when calling getRespeckStreamedData.');
    //     }

    //     const queryParameters: runtime.HTTPQuery = {};

    //     const headerParameters: runtime.HTTPHeaders = {};

    //     // const response = this.request({
    //     //     path: `/respeck/stream/{respeck_mac}`.replace(`{${"respeck_mac"}}`, encodeURIComponent(String(requestParameters.respeckMac))),
    //     //     method: 'GET',
    //     //     headers: headerParameters,
    //     //     query: queryParameters,
    //     // });
    //     const response = oboe({
    //         url: `/respeck/stream/{respeck_mac}`.replace(`{${"respeck_mac"}}`, encodeURIComponent(String(requestParameters.respeckMac))),
    //         method: 'GET',
    //         headers: headerParameters,
    //         // query: queryParameters,
    //     });
    //     // console.log(response)
    //     while (true) {
    //       response.node('*', (v) => {
    //         // yield v
    //       })
    //     }
    //     // console.log((await response).text())

    //     // response.then(r => {
    //     //   // console.log(r.json())
    //     //   const reader = r.body?.getReader();
    //     //   console.log(reader)

    //     //   // while (true) {
    //     //     reader!!.read().then(v => {
    //     //       // if (done) break;
    //     //       console.log('Received', v);
    //     //     })
    //     //     // const { value, done } = ;
    //     //   // }
    //     // })

    //     // console.log(reader)

    //     // yield 1

    //     // console.log(response)
    //     // response.body?.getReader().read().then((v) => {
    //     //     console.log(v)
    //     // })
    //     // return new Promise(() => [1])
    //     // return new runtime.JSONApiResponse<any>(response, ndjsonStream);
    // }

    /**
     */
    // async getRespeckStreamedData(requestParameters: GetRespeckStreamedDataRequest): Promise<Array<number>> {
    //     const response = await this.getRespeckStreamedDataRaw(requestParameters);
    //     return await response.value();
    // }

    /**
     */
    async postRespeckDataRaw(requestParameters: PostRespeckDataRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.respeckMac === null || requestParameters.respeckMac === undefined) {
            throw new runtime.RequiredError('respeckMac','Required parameter requestParameters.respeckMac was null or undefined when calling postRespeckData.');
        }

        if (requestParameters.payload === null || requestParameters.payload === undefined) {
            throw new runtime.RequiredError('payload','Required parameter requestParameters.payload was null or undefined when calling postRespeckData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/respeck/{respeck_mac}`.replace(`{${"respeck_mac"}}`, encodeURIComponent(String(requestParameters.respeckMac))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RespeckDataToJSON(requestParameters.payload),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postRespeckData(requestParameters: PostRespeckDataRequest): Promise<void> {
        await this.postRespeckDataRaw(requestParameters);
    }

}
