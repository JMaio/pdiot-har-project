// tslint:disable
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface RespeckData
 */
export interface RespeckData {
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof RespeckData
     */
    respeck_data?: Array<Array<number>>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullData: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {string} [xFields] An optional fields mask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRespeckData: async (respeckMac: string, xFields?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'respeckMac' is not null or undefined
            if (respeckMac === null || respeckMac === undefined) {
                throw new RequiredError('respeckMac','Required parameter respeckMac was null or undefined when calling getRespeckData.');
            }
            const localVarPath = `/respeck/{respeck_mac}`
                .replace(`{${"respeck_mac"}}`, encodeURIComponent(String(respeckMac)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xFields !== undefined && xFields !== null) {
                localVarHeaderParameter['X-Fields'] = String(xFields);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRespeckStreamedData: async (respeckMac: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'respeckMac' is not null or undefined
            if (respeckMac === null || respeckMac === undefined) {
                throw new RequiredError('respeckMac','Required parameter respeckMac was null or undefined when calling getRespeckStreamedData.');
            }
            const localVarPath = `/respeck/stream/{respeck_mac}`
                .replace(`{${"respeck_mac"}}`, encodeURIComponent(String(respeckMac)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {RespeckData} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRespeckData: async (respeckMac: string, payload: RespeckData, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'respeckMac' is not null or undefined
            if (respeckMac === null || respeckMac === undefined) {
                throw new RequiredError('respeckMac','Required parameter respeckMac was null or undefined when calling postRespeckData.');
            }
            // verify required parameter 'payload' is not null or undefined
            if (payload === null || payload === undefined) {
                throw new RequiredError('payload','Required parameter payload was null or undefined when calling postRespeckData.');
            }
            const localVarPath = `/respeck/{respeck_mac}`
                .replace(`{${"respeck_mac"}}`, encodeURIComponent(String(respeckMac)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof payload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(payload !== undefined ? payload : {}) : (payload || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullData(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getFullData(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {string} [xFields] An optional fields mask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRespeckData(respeckMac: string, xFields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespeckData>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getRespeckData(respeckMac, xFields, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRespeckStreamedData(respeckMac: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getRespeckStreamedData(respeckMac, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {RespeckData} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRespeckData(respeckMac: string, payload: RespeckData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postRespeckData(respeckMac, payload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullData(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getFullData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {string} [xFields] An optional fields mask
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRespeckData(respeckMac: string, xFields?: string, options?: any): AxiosPromise<RespeckData> {
            return DefaultApiFp(configuration).getRespeckData(respeckMac, xFields, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRespeckStreamedData(respeckMac: string, options?: any): AxiosPromise<Array<number>> {
            return DefaultApiFp(configuration).getRespeckStreamedData(respeckMac, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} respeckMac 
         * @param {RespeckData} payload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRespeckData(respeckMac: string, payload: RespeckData, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postRespeckData(respeckMac, payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFullData(options?: any) {
        return DefaultApiFp(this.configuration).getFullData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} respeckMac 
     * @param {string} [xFields] An optional fields mask
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRespeckData(respeckMac: string, xFields?: string, options?: any) {
        return DefaultApiFp(this.configuration).getRespeckData(respeckMac, xFields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} respeckMac 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRespeckStreamedData(respeckMac: string, options?: any) {
        return DefaultApiFp(this.configuration).getRespeckStreamedData(respeckMac, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} respeckMac 
     * @param {RespeckData} payload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postRespeckData(respeckMac: string, payload: RespeckData, options?: any) {
        return DefaultApiFp(this.configuration).postRespeckData(respeckMac, payload, options).then((request) => request(this.axios, this.basePath));
    }

}


